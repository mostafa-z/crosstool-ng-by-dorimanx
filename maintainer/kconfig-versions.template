#
# DO NOT EDIT! This file is automatically generated.
#
#!if [ "@@nforks@@" -ge 2 ]

choice
	bool "Show @@master@@ versions from"

#!foreach fork
config @@masterpfx@@_USE_@@originpfx@@
	bool "@@origin@@"
#!if [ -n "@@only_obsolete@@" ]
	depends on OBSOLETE
#!end-if
#!if [ -n "@@only_experimental@@" ]
	depends on EXPERIMENTAL
#!end-if
	help
@@originhelp@@

#!end-foreach
endchoice

config @@masterpfx@@_USE
	string
#!foreach fork
	default "@@pfx@@" if @@masterpfx@@_USE_@@originpfx@@
#!end-foreach

#!end-if

#!foreach fork
#!if [ "@@nforks@@" -ge 2 ]
if @@masterpfx@@_USE_@@originpfx@@
#!end-if

#!// If a project makes official releases, using "bleeding edge"
#!// from a development repository is experimental. However, there
#!// are projects that consider its HEAD a "rolling release". For
#!// those, checking out from a repository is the regular method.
#!if [ -n "@@all_versions@@" ]
if EXPERIMENTAL
#!end-if
choice
	bool "Source of @@name@@"

#!if [ -n "@@all_versions@@" ]
config @@pfx@@_SRC_RELEASE
	bool "Released tarball"
	help
	  Download a released tarball.

#!end-if
#!if [ -n "@@repository@@" ]
config @@pfx@@_SRC_DEVEL
	bool "Vendor repository"
	help
	  Check out from vendor repository at:
	  @@repository_url@@

if @@pfx@@_SRC_DEVEL

config @@pfx@@_DEVEL_VCS
	string
	default "@@vcs@@"

config @@pfx@@_DEVEL_URL
	string
	default "@@repository_url@@"

config @@pfx@@_DEVEL_BRANCH
	string "Branch to check out"
	default "@@repository_dflt_branch@@"
	help
	  Git: branch to be checked out
	  Subversion: directories to append to the repository URL.

config @@pfx@@_DEVEL_REVISION
	string "Revision/changeset"
	default "@@repository_cset@@"
	help
	  Commit ID or revision ID to check out.

endif

#!end-if
config @@pfx@@_SRC_CUSTOM
	bool "Custom location"
	depends on EXPERIMENTAL
	help
	  Custom directory or tarball.

if @@pfx@@_SRC_CUSTOM

config @@pfx@@_CUSTOM_LOCATION
	string "Custom source location"
	help
	  Path to the directory or tarball with the sources.

endif

endchoice
#!if [ -n "@@all_versions@@" ]
endif

config @@pfx@@_MIRRORS_ARRAY
    string
    default "@@mirrors@@"
#!end-if

#!// Below, we explicitly select all milestones to which a given version
#!// compares greater-or-equal. We don't select just the latest applicable
#!// (and letting milestones chain-select each other, with FOO_6_or_later
#!// selecting FOO_5_or_later and so on) so that we can handle the cases
#!// where we need to identify a range of releases on a branch, for example,
#!// "all FOO releases after 4.9.1 but before 4.9.3".
#!//
#!if [ -n "@@all_versions@@" -a -z "@@versionlocked@@" ]
choice
	bool "Version of @@name@@"
    help
      For a released version, select the version of @@name@@ to download
      and build. For sources out of the vendor repository or from a custom
      location, select the version that describes those custom sources.
      Based on this version, crosstool-NG may apply some version-specific
      quirks while building @@name@@.

config @@pfx@@_VERY_NEW
    bool "newer than anything below"
    depends on EXPERIMENTAL
    depends on @@pfx@@_SRC_DEVEL || @@pfx@@_SRC_CUSTOM
#!foreach milestone
    select @@masterpfx@@_@@ms_kcfg@@_or_later
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_older
#!end-foreach

#!foreach version
config @@pfx@@_V_@@kcfg@@
	bool "@@ver@@@@ver_postfix@@"
#!if [ "@@obsolete@@" = "yes" ]
	depends on OBSOLETE
#!end-if
#!if [ "@@experimental@@" = "yes" ]
	depends on EXPERIMENTAL
#!end-if
#!foreach milestone
#!if [ "@@version_cmp_milestone@@" -ge 0 ]
	select @@masterpfx@@_@@ms_kcfg@@_or_later
#!end-if
#!if [ "@@version_cmp_milestone@@" -gt 0 ]
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_older
#!end-if
#!if [ "@@version_cmp_milestone@@" -lt 0 ]
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_later
#!end-if
#!end-foreach

#!end-foreach
config @@pfx@@_VERY_OLD
    bool "older than anything above"
    depends on OBSOLETE && EXPERIMENTAL
    depends on @@pfx@@_SRC_DEVEL || @@pfx@@_SRC_CUSTOM
#!foreach milestone
    depends on !@@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_later
#!end-foreach

endchoice
#!end-if

#!if [ -n "@@versionlocked@@" ]
#!foreach version
config @@pfx@@_V_@@kcfg@@
    def_bool y
    depends on @@versionlocked@@_V_@@kcfg@@

#!end-foreach
#!end-if

#!if [ "@@nforks@@" -ge 2 ]
endif
#!end-if

config @@pfx@@_VERSION
	string
#!foreach version
	default "@@ver@@" if @@pfx@@_V_@@kcfg@@
#!end-foreach
	default "unknown"

#!end-foreach

#!foreach milestone
#!// Milestones selected by a chosen version of this package
config @@masterpfx@@_@@ms_kcfg@@_or_later
	bool

#!// Milestone requirements selected by other packages that restrict
#!// the choices in this package
config @@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_later
    bool

config @@masterpfx@@_REQUIRE_@@ms_kcfg@@_or_older
    bool

#!end-foreach
