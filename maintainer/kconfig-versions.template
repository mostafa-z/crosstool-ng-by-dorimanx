#
# DO NOT EDIT! This file is automatically generated.
#
#!if [ "@@nforks@@" -ge 2 ]

choice
	bool "Show @@master@@ versions from"

#!foreach fork
config @@masterpfx@@_USE_@@originpfx@@
	bool "@@origin@@"
#!if [ -n "@@only_obsolete@@" ]
	depends on OBSOLETE
#!end-if
#!if [ -n "@@only_experimental@@" ]
	depends on EXPERIMENTAL
#!end-if
	help
@@originhelp@@

#!end-foreach
endchoice

config @@masterpfx@@_USE
	string
#!foreach fork
	default "@@pfx@@" if @@masterpfx@@_USE_@@originpfx@@
#!end-foreach

#!end-if

#!foreach fork
#!if [ "@@nforks@@" -ge 2 ]
if @@masterpfx@@_USE_@@originpfx@@
#!end-if

#!// If a project makes official releases, using "bleeding edge"
#!// from a development repository is experimental. However, there
#!// are projects that consider its HEAD a "rolling release". For
#!// those, checking out from a repository is the regular method.
#!if [ -n "@@all_versions@@" ]
if EXPERIMENTAL
#!end-if
choice
	bool "Source of @@name@@"

#!if [ -n "@@all_versions@@" ]
config @@pfx@@_SRC_RELEASE
	bool "Released tarball"
	help
	  Download a released tarball.

#!end-if
#!if [ -n "@@repository@@" ]
config @@pfx@@_SRC_DEVEL
	bool "Vendor repository"
	help
	  Check out from vendor repository at:
	  @@repository_url@@

#!end-if
config @@pfx@@_SRC_CUSTOM
	bool "Custom location"
	depends on EXPERIMENTAL
	help
	  Custom directory or tarball.

endchoice
#!if [ -n "@@all_versions@@" ]
endif
#!end-if

#!if [ -n "@@repository@@" ]
if @@pfx@@_SRC_DEVEL

config @@pfx@@_DEVEL_VCS
	string
	default "@@vcs@@"

config @@pfx@@_DEVEL_URL
	string
	default "@@repository_url@@"

config @@pfx@@_DEVEL_BRANCH
	string "Branch to check out"
	default "@@repository_dflt_branch@@"
	help
	  Git: branch to be checked out
	  Subversion: directories to append to the repository URL.

config @@pfx@@_DEVEL_REVISION
	string "Revision/changeset"
	default "@@repository_cset@@"
	help
	  Commit ID or revision ID to check out.

endif
#!end-if

if @@pfx@@_SRC_CUSTOM

config @@pfx@@_CUSTOM_LOCATION
	string "Custom source location"
	help
	  Path to the directory or tarball with the sources.

endif

#!if [ -n "@@all_versions@@" ]
choice
	bool "Version of @@name@@"

#!foreach version
config @@pfx@@_V_@@kcfg@@
	bool "@@ver@@@@ver_postfix@@"
#!if [ "@@obsolete@@" = "yes" ]
	depends on OBSOLETE
#!end-if
#!if [ "@@experimental@@" = "yes" ]
	depends on EXPERIMENTAL
#!end-if
#!if [ -n "@@milestone@@" ]
	select @@masterpfx@@_@@milestone@@_or_later
#!end-if

#!end-foreach
endchoice
#!end-if

#!if [ "@@nforks@@" -ge 2 ]
endif
#!end-if

config @@pfx@@_VERSION
	string
#!foreach version
	default "@@ver@@" if @@pfx@@_V_@@kcfg@@
#!end-foreach
	default "unknown"

#!end-foreach

#!foreach milestone
config @@masterpfx@@_@@ms_kcfg@@_or_later
	bool
#!if [ -n "@@ms_prev@@" ]
	select @@masterpfx@@_@@ms_prev@@_or_later
#!end-if

#!end-foreach
